---
description: 
globs: 
alwaysApply: false
---
# AutoRedirect 测试系统与配置管理规则

## 测试系统概述

AutoRedirect项目拥有完整的测试框架，包括单元测试、集成测试、性能测试和配置验证测试。

### 测试文件结构
- [test_all_rules.html](mdc:test_all_rules.html) - 主测试页面，提供完整的测试界面
- [test_rules.js](mdc:script/test_rules.js) - 核心测试引擎，包含所有测试逻辑
- [test_config_rules.js](mdc:script/test_config_rules.js) - 配置规则专门测试模块
- [autoredirect_test.html](mdc:autoredirect_test.html) - 本地文件重定向测试页面
- [TESTING_GUIDE.md](mdc:test/TESTING_GUIDE.md) - 详细的测试指南和最佳实践

## 主测试页面 ([test_all_rules.html](mdc:test_all_rules.html))

### 功能特性
1. **实时测试**：输入URL和规则，立即查看重定向结果
2. **批量测试**：运行预定义的测试套件
3. **性能监控**：显示测试执行时间和性能指标
4. **结果可视化**：清晰的测试结果展示和错误报告
5. **交互式调试**：支持单步调试和详细日志

### 使用方法
1. 在浏览器中打开 [test_all_rules.html](mdc:test_all_rules.html)
2. 在"URL测试"区域输入要测试的URL
3. 在"规则配置"区域输入重定向规则
4. 点击"测试"按钮查看结果
5. 使用"运行所有测试"进行完整测试

### 测试类型
- **精确匹配测试**：验证=前缀的精确匹配功能
- **通配符测试**：测试*通配符和{1},{2},{3}占位符
- **本地文件测试**：验证file://协议的处理
- **性能测试**：大量规则下的性能验证
- **边界测试**：异常输入和边界条件

## 测试引擎 ([test_rules.js](mdc:script/test_rules.js))

### 核心测试类

#### TestRunner
主测试运行器，负责协调所有测试的执行：
```javascript
const runner = new TestRunner();
runner.runAllTests(); // 运行所有测试
runner.runTestSuite('exact-match'); // 运行特定测试套件
```

#### TestCase
单个测试用例的数据结构：
```javascript
const testCase = {
    name: "精确匹配测试",
    url: "localhost:3000",
    rules: ["=localhost:3000####https://dev.example.com"],
    expected: "https://dev.example.com",
    description: "测试精确匹配功能"
};
```

### 测试套件分类

#### 1. 精确匹配测试套件
- 测试=前缀的完全匹配功能
- 验证不匹配情况的正确处理
- 测试大小写敏感性

#### 2. 模式匹配测试套件
- 开头匹配（^前缀）
- 结尾匹配（$后缀）
- 包含匹配（默认模式）

#### 3. 通配符测试套件
- 单通配符匹配
- 多通配符匹配
- 占位符替换（{1}, {2}, {3}）
- 占位符重复使用

#### 4. 本地文件测试套件
- file://协议处理
- 路径匹配测试
- 跨平台兼容性

#### 5. 性能测试套件
- 大量规则处理性能
- 复杂正则表达式性能
- 内存使用监控

### 测试结果分析
- **通过率统计**：显示各测试套件的通过率
- **性能指标**：执行时间、内存使用等
- **错误报告**：详细的失败原因和调试信息
- **覆盖率分析**：代码覆盖率和功能覆盖率

## 配置测试 ([test_config_rules.js](mdc:script/test_config_rules.js))

### 配置验证功能
1. **规则格式验证**：检查规则是否符合`原始URL####目标URL`格式
2. **注释处理验证**：确保#开头的行被正确忽略
3. **示例配置测试**：验证 [example_config.txt](mdc:example_config.txt) 中的所有示例
4. **边界条件测试**：测试空规则、无效格式等情况

### ConfigTester类
```javascript
const tester = new ConfigTester();
tester.testExampleConfig(); // 测试示例配置
tester.validateAllRules(); // 验证所有规则格式
tester.testCommentHandling(); // 测试注释处理
```

### 配置测试用例
- **基础格式测试**：验证基本的规则格式
- **通配符配置测试**：测试复杂的通配符规则
- **本地文件配置测试**：验证本地文件重定向配置
- **多结果配置测试**：测试一对多的重定向规则

## 本地文件测试 ([autoredirect_test.html](mdc:autoredirect_test.html))

### 专门功能
- **file://协议测试**：专门测试本地文件URL的处理
- **路径匹配验证**：测试各种本地文件路径模式
- **实际重定向测试**：在真实环境中测试重定向功能

### 测试场景
1. **基础本地文件重定向**
2. **通配符本地文件匹配**
3. **跨目录文件重定向**
4. **文件扩展名处理**

## 配置管理系统

### 配置文件 ([example_config.txt](mdc:example_config.txt))

#### 配置结构
```
# ===== 注释说明 =====
# 以#开头的行为注释，会被忽略

# ===== 基础重定向规则 =====
# 精确匹配（推荐，最安全）
=localhost:3000####https://dev.example.com

# ===== 通配符重定向规则 =====
# 通配符匹配和URL模板替换
*ChromeStore/autoRedirect/*.html####https://www.example.com/{2}/

# ===== 本地文件重定向规则 =====
# 本地文件到远程URL的映射
*autoredirect_test.html$####https://www.example.com/autoRedirect/
```

#### 配置分类
1. **本地文件重定向规则**：处理file://协议的URL
2. **精确匹配规则**：使用=前缀的完全匹配
3. **模式匹配规则**：使用^、$、*等前缀的模式匹配
4. **通配符规则**：支持URL模板替换的复杂规则
5. **多结果规则**：一个URL匹配多个目标的规则

### 配置最佳实践

#### 规则编写原则
1. **优先使用精确匹配**：避免意外触发
2. **合理使用通配符**：平衡功能和性能
3. **添加详细注释**：便于维护和理解
4. **规则分组管理**：按功能或场景分组
5. **定期测试验证**：确保规则正确性

#### 性能优化建议
1. **精确规则在前**：将精确匹配规则放在前面
2. **避免过宽匹配**：减少不必要的匹配尝试
3. **合理使用正则**：避免复杂的正则表达式
4. **规则数量控制**：保持合理的规则数量

## 测试指南 ([TESTING_GUIDE.md](mdc:test/TESTING_GUIDE.md))

### 测试流程
1. **功能测试**：验证基本功能正常工作
2. **兼容性测试**：测试不同浏览器和操作系统
3. **性能测试**：验证大量规则下的性能
4. **用户体验测试**：测试界面交互和用户流程
5. **回归测试**：确保新功能不影响现有功能

### 测试环境
- **开发环境**：本地开发时的测试
- **测试环境**：专门的测试环境
- **生产环境**：实际使用环境的测试

### 测试数据管理
- **测试用例库**：维护完整的测试用例
- **测试数据集**：准备各种测试数据
- **基准数据**：性能测试的基准数据

## 调试和故障排除

### 调试工具
1. **测试页面调试**：使用 [test_all_rules.html](mdc:test_all_rules.html) 进行实时调试
2. **控制台调试**：查看Chrome扩展后台页面的控制台
3. **网络调试**：使用Chrome开发者工具的Network标签
4. **性能调试**：使用Performance标签分析性能

### 常见问题诊断
1. **规则不生效**：
   - 检查规则格式是否正确
   - 验证匹配模式是否合适
   - 确认扩展是否启用

2. **性能问题**：
   - 检查规则数量和复杂度
   - 分析正则表达式性能
   - 使用性能测试工具

3. **匹配错误**：
   - 验证URL格式
   - 检查通配符使用
   - 测试边界条件

### 日志和监控
- **调试日志**：详细的执行日志
- **性能监控**：执行时间和资源使用
- **错误追踪**：异常和错误的详细信息

## 持续集成和自动化测试

### 自动化测试流程
1. **代码提交触发**：每次代码提交自动运行测试
2. **多环境测试**：在不同环境中运行测试
3. **测试报告生成**：自动生成详细的测试报告
4. **质量门禁**：测试不通过则阻止发布

### 测试覆盖率
- **功能覆盖率**：确保所有功能都有测试
- **代码覆盖率**：确保代码的充分测试
- **场景覆盖率**：覆盖各种使用场景

### 质量保证
- **代码审查**：确保代码质量
- **测试审查**：确保测试质量
- **文档审查**：确保文档完整性

## 测试数据和用例管理

### 测试数据分类
1. **正常数据**：标准的测试输入
2. **边界数据**：边界条件的测试数据
3. **异常数据**：错误和异常情况的数据
4. **性能数据**：大量数据的性能测试

### 用例维护
- **用例更新**：随功能变化更新测试用例
- **用例优化**：提高测试效率和覆盖率
- **用例文档**：维护详细的用例文档

这个测试系统确保了AutoRedirect扩展的高质量和稳定性，为开发和维护提供了强有力的支持。

## 详细测试覆盖范围 (参考 [TESTING_GUIDE.md](mdc:test/TESTING_GUIDE.md))

### 1. 本地文件重定向 (重点测试)
- 结尾匹配测试
- 完整file://协议路径匹配
- 路径通配符匹配和文件名提取
- 多通配符子目录支持
- 文件扩展名转换
- 跨用户开发环境映射

### 2. 精确匹配模式 (=前缀)
- 完全匹配测试
- 不匹配情况验证

### 3. 开头匹配模式 (^前缀 或 *后缀)
- 前缀匹配测试
- 通配符匹配测试

### 4. 结尾匹配模式 (*前缀 或 $后缀)
- 后缀匹配测试
- 结尾通配符测试

### 5. URL模板替换功能
- 基础域名替换
- 复杂路径重写
- 多段路径重组
- 参数重新排列
- 重复使用占位符
- 部分占位符使用

### 6. 包含匹配模式 (默认)
- 字符串包含测试
- 向后兼容性验证

### 7. 通用URL提取功能
- URL参数解码
- 复杂URL提取

### 8. 多结果选择功能
- 多规则匹配检测
- 选择页面触发

## 完整功能测试清单 (参考 [TESTING_GUIDE.md](mdc:test/TESTING_GUIDE.md))

### 1. 基础功能验证
- 扩展状态检查 (加载、图标、弹出窗口、开关)
- 配置管理 (选项页面、规则编辑、保存、错误验证)

### 2. 核心重定向功能
- 通用URL提取功能 (知乎链接解码等)
- 本地文件重定向 (file://协议、各种匹配模式、扩展名转换等)
- 在线网站重定向 (HTTP/HTTPS、模式匹配、目标正确性)
- 多结果选择 (触发选择页面、选项显示、跳转正确性)

### 3. 高级功能测试
- 规则格式支持 (基本格式、通配符、空目标URL)
- 错误处理 (无效规则、循环重定向、空目标URL)

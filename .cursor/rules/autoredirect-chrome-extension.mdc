---
description: 
globs: 
alwaysApply: false
---
# AutoRedirect Chrome扩展项目规则

## 项目概述
AutoRedirect是一个功能强大的Chrome浏览器扩展，专门用于自动重定向URL。支持本地文件路径、开发环境URL到生产环境的智能重定向，具备完整的测试框架和配置系统。

## 核心文件结构

### 扩展配置
- [manifest.json](mdc:manifest.json) - Chrome扩展的核心配置文件，定义权限、背景脚本、图标等
- [regpattern.txt](mdc:regpattern.txt) - 默认重定向规则模式文件
- [example_config.txt](mdc:example_config.txt) - 详细的配置示例文件，包含各种重定向规则的使用方法

### 用户界面文件
- [popup.html](mdc:popup.html) - 扩展弹出窗口，包含开关控制和状态显示
- [options.html](mdc:options.html) - 扩展选项页面，功能丰富的规则配置界面
- [chose.html](mdc:chose.html) - 多个匹配结果时的选择页面

### JavaScript核心模块
- [script/background.js](mdc:script/background.js) - 后台脚本，处理扩展生命周期和事件监听
- [script/redirect-engine.js](mdc:script/redirect-engine.js) - 重定向引擎核心，处理URL匹配和重定向逻辑
- [script/popup_switch.js](mdc:script/popup_switch.js) - 弹出窗口的开关控制逻辑
- [script/options.js](mdc:script/options.js) - 选项页面的交互逻辑和规则管理
- [script/chose.js](mdc:script/chose.js) - 选择页面的交互逻辑

### 测试系统
- [test_all_rules.html](mdc:test_all_rules.html) - 完整的规则测试页面，支持批量测试
- [test_rules.js](mdc:test_rules.js) - 规则测试引擎，包含各种测试用例
- [test_config_rules.js](mdc:test_config_rules.js) - 配置规则的专门测试模块
- [autoredirect_test.html](mdc:autoredirect_test.html) - 本地文件重定向测试页面
- [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) - 详细的测试指南文档

### 资源文件
- `images/` - 包含扩展图标文件（icon_19.png, icon_48.png, icon_128.png等）

## 核心功能模块

### 1. 重定向引擎 ([script/redirect-engine.js](mdc:script/redirect-engine.js))
- **URL模式匹配**：支持精确匹配(=)、开头匹配(^)、结尾匹配($)、包含匹配
- **通配符支持**：使用*进行模式匹配，支持{1},{2},{3}等占位符替换
- **本地文件处理**：专门处理file://协议的本地文件重定向
- **URL模板替换**：支持复杂的URL重写和参数重新排列
- **通用URL提取**：自动解码URL参数中的目标地址

### 2. 规则匹配系统
- **多种匹配模式**：
  - 精确匹配：`=pattern` - 完全匹配，最安全
  - 开头匹配：`^pattern` 或 `pattern*` - 匹配开头
  - 结尾匹配：`*pattern` 或 `pattern$` - 匹配结尾
  - 包含匹配：`pattern` - 默认模式，向后兼容
- **规则格式**：`原始URL模式####目标URL模式`
- **注释支持**：以#开头的行为注释，会被忽略
- **多结果处理**：支持一个URL匹配多个规则时的用户选择

### 3. 用户界面系统
- **弹出窗口**：简洁的开关控制，实时状态显示
- **选项页面**：功能丰富的规则编辑器，支持语法高亮和验证
- **选择页面**：优雅的多选项界面，支持键盘快捷键

### 4. 数据存储与配置
- **localStorage存储**：jump_list（规则列表）、jump_list_auto（开关状态）
- **远程配置加载**：支持从远程URL加载默认规则
- **配置导入导出**：支持规则的备份和恢复

### 5. 测试框架
- **单元测试**：针对各种匹配模式的详细测试
- **集成测试**：完整的重定向流程测试
- **性能测试**：大量规则下的性能验证
- **边界测试**：异常情况和边界条件测试

## 重定向规则详解

### 本地文件重定向规则
基于 [example_config.txt](mdc:example_config.txt) 的配置示例：

#### 基础本地文件重定向
```
# 结尾匹配（推荐，安全且精确）
*autoredirect_test.html$####https://www.example.com/autoRedirect/

# 完整file://协议路径匹配（最精确）
=file:///Users/ExtTeam/dev/ChromeStore/autoRedirect/autoredirect_test.html####https://www.example.com/autoRedirect/
```

#### 通配符本地文件重定向
```
# 路径通配符匹配（推荐用于批量重定向）
*ChromeStore/autoRedirect/*.html####https://www.example.com/{2}/

# file://协议的通配符匹配（最精确的批量匹配）
=file:///Users/ExtTeam/dev/ChromeStore/autoRedirect/*.html####https://www.example.com/{1}/
```

#### 高级重定向场景
```
# 本地开发环境到生产环境映射（跨用户通用）
=file:///Users/*/dev/*/autoRedirect/*.html####https://production.example.com/{3}/

# 本地文件扩展名转换
*ChromeStore/autoRedirect/*.html####https://www.example.com/{2}.php
```

### URL模板替换功能
```
# 基础域名替换
https://old-domain.com/*####https://new-domain.com/{1}

# 复杂路径重写
http://example.com/*/page/*####https://newsite.com/{1}/newpage/{2}

# 参数重新排列
site.com/*/page/*/section/*####newsite.com/{3}/{1}/{2}
```

## 开发指南

### 修改重定向逻辑
1. 核心逻辑在 [script/redirect-engine.js](mdc:script/redirect-engine.js)
2. 后台事件处理在 [script/background.js](mdc:script/background.js)
3. 测试新功能使用 [test_all_rules.html](mdc:test_all_rules.html)

### 修改用户界面
1. 弹出窗口：编辑 [popup.html](mdc:popup.html) 和 [script/popup_switch.js](mdc:script/popup_switch.js)
2. 选项页面：修改 [options.html](mdc:options.html) 和 [script/options.js](mdc:script/options.js)
3. 选择页面：编辑 [chose.html](mdc:chose.html) 和 [script/chose.js](mdc:script/chose.js)

### 添加测试用例
1. 在 [test_rules.js](mdc:test_rules.js) 中添加新的测试用例
2. 在 [test_config_rules.js](mdc:test_config_rules.js) 中添加配置测试
3. 参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 了解测试最佳实践

### 调试功能
- 使用 [script/redirect-engine.js](mdc:script/redirect-engine.js) 中的debugLog函数
- 在 [test_all_rules.html](mdc:test_all_rules.html) 中进行实时测试
- 查看Chrome扩展的后台页面控制台

## 权限说明
扩展需要以下权限（在 [manifest.json](mdc:manifest.json) 中定义）：
- `tabs` - 访问标签页信息
- `webRequest` - 监听网络请求
- `webRequestBlocking` - 阻塞和修改网络请求
- `http://*/*` 和 `https://*/*` - 访问所有HTTP/HTTPS网站
- `file:///*` - 访问本地文件

## 最佳实践

### 规则编写
1. 优先使用精确匹配（=前缀）避免误触发
2. 通配符规则放在精确规则之后
3. 使用 [example_config.txt](mdc:example_config.txt) 作为参考
4. 在 [test_all_rules.html](mdc:test_all_rules.html) 中验证规则

### 性能优化
1. 避免过于宽泛的匹配模式
2. 合理使用通配符，避免性能问题
3. 定期清理无用规则

### 安全考虑
1. 避免创建重定向循环
2. 谨慎使用通配符匹配
3. 验证目标URL的安全性

## 常见开发任务

### 添加新的匹配模式
1. 在 [script/redirect-engine.js](mdc:script/redirect-engine.js) 中扩展匹配逻辑
2. 在 [test_rules.js](mdc:test_rules.js) 中添加对应测试
3. 更新 [example_config.txt](mdc:example_config.txt) 中的示例

### 优化用户体验
1. 改进 [options.html](mdc:options.html) 的规则编辑器
2. 增强 [chose.html](mdc:chose.html) 的选择界面
3. 优化 [popup.html](mdc:popup.html) 的状态显示

### 扩展测试覆盖
1. 参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 编写测试
2. 使用 [test_all_rules.html](mdc:test_all_rules.html) 进行综合测试
3. 在 [autoredirect_test.html](mdc:autoredirect_test.html) 中测试本地文件重定向

## 注意事项
- 修改核心逻辑后必须重新加载扩展
- 测试时注意检查控制台的调试信息
- 使用 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 确保测试完整性
- 参考 [example_config.txt](mdc:example_config.txt) 了解所有支持的规则格式

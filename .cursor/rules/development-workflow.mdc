---
description: 
globs: 
alwaysApply: false
---
# AutoRedirect 开发工作流程规则

## 开发环境设置

### Chrome扩展开发模式
1. 打开Chrome浏览器，进入 `chrome://extensions/`
2. 启用"开发者模式"
3. 点击"加载已解压的扩展程序"，选择项目根目录
4. 每次修改代码后，点击扩展卡片上的刷新按钮重新加载

### 调试工具
- **后台脚本调试**：在扩展管理页面点击"背景页"链接
- **弹出窗口调试**：右键点击扩展图标，选择"检查弹出内容"
- **选项页面调试**：在选项页面右键选择"检查"
- **测试页面调试**：在 [test_all_rules.html](mdc:test_all_rules.html) 中进行实时测试

## 代码修改工作流程

### 修改重定向引擎
1. 编辑 [script/redirect-engine.js](mdc:script/redirect-engine.js) - 核心重定向逻辑
2. 在 [test_all_rules.html](mdc:test_all_rules.html) 中测试新功能
3. 运行 [test_rules.js](mdc:test_rules.js) 中的单元测试
4. 重新加载扩展并验证功能

### 修改后台逻辑
1. 编辑 [script/background.js](mdc:script/background.js) - 事件监听和生命周期管理
2. 重新加载扩展
3. 在后台页面控制台查看调试信息
4. 使用 [autoredirect_test.html](mdc:autoredirect_test.html) 测试本地文件重定向

### 修改用户界面
1. **弹出窗口**：
   - 编辑 [popup.html](mdc:popup.html) 和 [script/popup_switch.js](mdc:script/popup_switch.js)
   - 测试开关功能和状态显示
2. **选项页面**：
   - 编辑 [options.html](mdc:options.html) 和 [script/options.js](mdc:script/options.js)
   - 测试规则编辑器和保存功能
3. **选择页面**：
   - 编辑 [chose.html](mdc:chose.html) 和 [script/chose.js](mdc:script/chose.js)
   - 测试多选项界面和键盘快捷键

### 修改样式
1. 直接在HTML文件的`<style>`标签中修改CSS
2. 重新加载扩展
3. 检查界面在不同分辨率下的显示效果
4. 确保响应式设计正常工作

## 测试流程

### 单元测试
使用 [test_rules.js](mdc:test_rules.js) 进行详细的单元测试：
1. **匹配模式测试**：验证各种URL匹配模式
2. **通配符测试**：测试*通配符和{1},{2},{3}占位符
3. **边界条件测试**：测试异常输入和边界情况
4. **性能测试**：验证大量规则下的性能

### 集成测试
使用 [test_all_rules.html](mdc:test_all_rules.html) 进行完整的集成测试：
1. **规则加载测试**：验证规则从localStorage和远程URL的加载
2. **重定向流程测试**：测试完整的URL重定向流程
3. **用户界面测试**：验证所有界面组件的交互
4. **多结果选择测试**：测试选择页面的功能

### 配置测试
使用 [test_config_rules.js](mdc:test_config_rules.js) 测试配置相关功能：
1. **配置解析测试**：验证 [example_config.txt](mdc:example_config.txt) 中的规则
2. **注释处理测试**：测试#注释行的正确处理
3. **格式验证测试**：验证规则格式的正确性

### 本地文件测试
使用 [autoredirect_test.html](mdc:autoredirect_test.html) 测试本地文件重定向：
1. **file://协议测试**：验证本地文件URL的处理
2. **路径匹配测试**：测试各种本地文件路径模式
3. **跨平台测试**：验证不同操作系统下的路径处理

### 功能测试清单
参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 进行完整的功能测试：
1. **开关测试**：在弹出窗口中切换开关，验证图标变化
2. **规则测试**：在选项页面添加测试规则，验证重定向功能
3. **多结果测试**：创建匹配多个结果的规则，测试选择页面
4. **精确匹配测试**：测试=前缀的精确匹配功能
5. **通配符测试**：测试*通配符和URL模板替换
6. **注释测试**：验证#注释行被正确忽略

### 调试技巧
- 在 [script/redirect-engine.js](mdc:script/redirect-engine.js) 中修改 `debugLevel` 查看详细调试信息
- 使用 `debugLog()` 函数添加自定义调试信息
- 在Chrome开发者工具的Network标签中查看请求拦截情况
- 使用 [test_all_rules.html](mdc:test_all_rules.html) 的实时测试功能进行快速验证

## 版本发布流程

### 准备发布
1. 运行完整的测试套件：
   - 执行 [test_rules.js](mdc:test_rules.js) 中的所有测试
   - 在 [test_all_rules.html](mdc:test_all_rules.html) 中进行集成测试
   - 参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 完成所有测试项目
2. 更新 [manifest.json](mdc:manifest.json) 中的版本号
3. 更新 [README.md](mdc:README.md) 中的更新日志
4. 清理调试代码和console.log语句
5. 验证 [example_config.txt](mdc:example_config.txt) 中的示例是否最新

### 打包扩展
1. 在Chrome扩展管理页面点击"打包扩展程序"
2. 选择项目根目录
3. 生成.crx文件和.pem私钥文件
4. 测试打包后的扩展功能

### 发布后验证
1. 在新的Chrome实例中安装打包后的扩展
2. 运行关键功能测试
3. 验证所有配置示例正常工作

## 常见问题解决

### 扩展无法加载
- 检查 [manifest.json](mdc:manifest.json) 语法是否正确
- 确认所有引用的文件路径是否存在
- 查看Chrome扩展管理页面的错误信息
- 验证权限配置是否完整

### 重定向不工作
- 检查扩展是否已启用（图标应该是粗体版本）
- 在后台页面控制台查看调试信息
- 验证规则格式是否正确（原始URL####目标URL）
- 使用 [test_all_rules.html](mdc:test_all_rules.html) 测试规则
- 检查 [script/redirect-engine.js](mdc:script/redirect-engine.js) 中的匹配逻辑

### 界面显示异常
- 检查HTML语法和CSS样式
- 确认JavaScript文件是否正确加载
- 使用开发者工具检查控制台错误
- 验证响应式设计在不同分辨率下的表现

### 测试失败
- 查看 [test_rules.js](mdc:test_rules.js) 中的具体测试用例
- 在 [test_all_rules.html](mdc:test_all_rules.html) 中单独测试失败的规则
- 参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 了解测试最佳实践
- 检查测试数据是否与实际代码逻辑匹配

### 性能问题
- 使用 [test_all_rules.html](mdc:test_all_rules.html) 进行性能测试
- 检查规则数量和复杂度
- 优化正则表达式匹配逻辑
- 考虑规则缓存机制

## 代码规范

### JavaScript规范
- 使用localStorage存储用户数据
- 使用Chrome扩展API进行浏览器交互
- 添加适当的错误处理和调试信息
- 遵循模块化设计原则（如 [script/redirect-engine.js](mdc:script/redirect-engine.js) 的独立性）

### HTML/CSS规范
- 保持HTML结构清晰和语义化
- CSS样式内联在HTML文件中，便于维护
- 确保界面在不同分辨率下正常显示
- 使用现代CSS特性提升用户体验

### 测试规范
- 每个新功能都要有对应的测试用例
- 测试用例要覆盖正常情况和边界情况
- 使用 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 作为测试标准
- 保持测试数据的真实性和代表性

### 文件组织
- 所有JavaScript文件放在 `script/` 目录
- 所有图片资源放在 `images/` 目录
- HTML文件放在项目根目录
- 配置和测试文件放在根目录
- 文档文件使用Markdown格式

## 开发最佳实践

### 功能开发
1. 先在 [test_rules.js](mdc:test_rules.js) 中编写测试用例
2. 在 [script/redirect-engine.js](mdc:script/redirect-engine.js) 中实现功能
3. 在 [test_all_rules.html](mdc:test_all_rules.html) 中验证功能
4. 更新 [example_config.txt](mdc:example_config.txt) 中的示例

### 调试流程
1. 使用 [test_all_rules.html](mdc:test_all_rules.html) 进行快速测试
2. 在Chrome扩展后台页面查看详细日志
3. 使用 [autoredirect_test.html](mdc:autoredirect_test.html) 测试本地文件场景
4. 参考 [TESTING_GUIDE.md](mdc:TESTING_GUIDE.md) 进行系统性测试

### 代码维护
1. 定期运行完整的测试套件
2. 保持 [example_config.txt](mdc:example_config.txt) 与代码功能同步
3. 及时更新文档和注释
4. 清理无用的调试代码
